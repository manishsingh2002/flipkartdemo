{{{
    {
        import { Component, Input, OnChanges } from '@angular/core';
import { DataService } from '../data.service';

@Component({
  selector: 'app-homepage',
  templateUrl: './homepage.component.html',
  styleUrls: ['./homepage.component.css'],
})
export class HomepageComponent {
  @Input() filteredData: any;
  toggle = true;
  productdata: any[] = [];
  filteredProducts: any[] = [];
  ascending: any[] = [];
  descending: any[] = [];
  togglecheckout = true;
  checkout = false;
  filteredResult: any[] = [];

  constructor(private dataService: DataService) {}

  ngOnInit() {
    this.dataService.getData().subscribe((response) => {
      if (response && response.products) {
        this.productdata = response.products;

        const ascendingData = this.productdata.slice();
        const descendingData = this.productdata.slice();

        this.ascending = ascendingData.sort((a, b) => {
          return a.price - b.price;
        });

        this.descending = descendingData.sort((a, b) => {
          return b.price - a.price;
        });

        // console.log('Original data:', this.productdata);
        // console.log('Sorted data (ascending):', this.ascending);
        // console.log('Sorted data (descending):', this.descending);
      } else {
        console.log('Error fetching data or no products in response');
      }
    });
  }
  ///////////////////////////////////////////////////
  togglechckoutpage() {
    this.togglecheckout = !this.togglecheckout;
    this.checkout = !this.checkout;
    this.toggle = !this.toggle;
  }

  togglehomepage() {
    if (this.filteredProducts.length > 0) {
      this.toggle = false;
    } else {
      this.toggle = true;
    }
  }

  resetsearch() {
    this.filteredProducts.length = 0;
    this.toggle = true;
  }

  //
  sortinnganydata(input: any) {
    if (this.filteredData.price.includes('LowToHigh')) {
      this.filteredResult = input.sort((a: any, b: any) => a.price - b.price);
      console.log('///////////////////////////////');
    } else if (this.filteredData.price.includes('HighToLow')) {
      this.filteredResult = input.sort((a: any, b: any) => b.price - a.price);
    } else {
      this.filteredResult;
    }
  }

  //
  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  filtering() {
    let filteredResult: any[] = [];
    if (
      this.filteredData.category.length > 0 &&
      this.filteredData.brand.length > 0
    ) {
      filteredResult.push(
        ...this.productdata.filter((product: any) => {
          return (
            this.filteredData.category.includes(product.category) &&
            this.filteredData.brand.includes(product.brand)
          );
        })
      );
    }
    //
    if (this.filteredData.rating.length > 0) {
      console.log('rating is more than 1');
      let filteredResult: any[] = this.productdata.filter((product: any) => {
        return this.filteredData.brand.includes(product.rating);
      });

      // Perform any additional operations on filteredResult
      this.sortinnganydata(filteredResult);
    }

    //
    if (this.filteredData.brand.length > 0) {
      // Filter based on brand
      filteredResult.push(
        ...this.productdata.filter((product: any) => {
          return this.filteredData.brand.includes(product.brand);
        })
      );
      // sortings by brand
      this.sortinnganydata(filteredResult);
      //
    }
    //
    else if (this.filteredData.category.length > 0) {
      // Filter based on category
      filteredResult.push(
        ...this.productdata.filter((product: any) => {
          return this.filteredData.category.includes(product.category);
        })
      );
      this.sortinnganydata(filteredResult);
    } else {
      filteredResult.push(...this.productdata);
      this.sortinnganydata(filteredResult);
    }
    // Update the filteredProducts array with the filtered result
    this.filteredProducts = filteredResult;
  }
  // }

  cartData: any[] = [];
  addTocart(product: any) {
    product.forEach((ele: any) => {
      const updatedProduct = { ...ele, quantity: 1, final_price: 0 };
      this.cartData.push(updatedProduct);
    });
    console.log('this.cartData', this.cartData);
  }
  // removeFromCart(index: number) {
  //   this.cartData.splice(index, 1);
  //   console.log('this.cartData', this.cartData);
  // }
}

// sorting of data by price
// if (this.filteredData.price[0] === 'LowToHigh') {
//   let filteredResult = this.productdata.filter((product: any) => {
//     return (
//       (this.filteredData.category.length === 0 ||
//         this.filteredData.category.includes(product.category)) &&
//       (this.filteredData.brand.length === 0 ||
//         this.filteredData.brand.includes(product.brand))
//     );
//   });

//   // sorting out the data
//   filteredResult = filteredResult.sort((a, b) => {
//     return a.price - b.price;
//   });
//   this.filteredProducts = filteredResult;
// }
// /////////////////////////////////////////////////////////filtering on the basis of low to high prices//////////////////////////////////////
// else if (this.filteredData.price[0] === 'HighToLow') {
//   let filteredResult = this.productdata.filter((product: any) => {
//     return (
//       (this.filteredData.category.length === 0 ||
//         this.filteredData.category.includes(product.category)) &&
//       (this.filteredData.brand.length === 0 ||
//         this.filteredData.brand.includes(product.brand))
//     );
//   });
//   // sorting out the data
//   filteredResult = filteredResult.sort((a, b) => {
//     return b.price - a.price;
//   });
//   this.filteredProducts = filteredResult; // Create a copy to avoid modifying original sort
// }
//
//
//////////////////////////////////////////////////////filtering price from High to loww //////////////////////////////////////////////////
// else {
// Filter based on category and brand

    }
}}}}w

hat is the error in this import {
  Component,
  OnInit,
  Output,
  EventEmitter,
  OnChanges,
} from '@angular/core';
import { DataService } from '../data.service';

@Component({
  selector: 'app-navbar',
  templateUrl: './navbar.component.html',
  styleUrls: ['./navbar.component.css'],
})
export class NavbarComponent implements OnInit {
  public data: any;
  public category: any[] = [];
  public brand: any[] = [];
  public price: any[] = [];
  public rating: any[] = [];
  selectedCategories: string[] = [];
  selectedRatings: number[] = [];
  selectedBrands: string[] = [];
  selectedPrices: any = [];
  togglecateegories = false;
  togglebrandings = false;
  toggleratings = false;
  togglepricings = false;
  productdata: any[] = [];
  selectedcategorybrands: any = [];
  // input data for child elements
  public filtereddata: { [key: string]: any[] } = {
    categories: this.selectedCategories,
    brands: this.selectedcategorybrands,
    prices: this.selectedPrices,
    ratings: this.selectedRatings,
  };
  // toggling

  //
  constructor(private dataService: DataService) {}
  //

  //
  ngOnInit() {
    this.dataService.getData().subscribe((response) => {
      if (response && response.products) {
        response.products.forEach((element: any) => {
          if (!this.category.includes(element.category)) {
            this.category.push(element.category);
          }
          if (!this.brand.includes(element.brand)) {
            this.brand.push(element.brand);
          }
          if (!this.price.includes(element.price)) {
            this.price.push(element.price);
          }
          if (!this.rating.includes(element.rating)) {
            this.rating.push(element.rating);
          }
        });
      }
    });
    //
    this.dataService.getData().subscribe((response) => {
      if (response && response.products) {
        response.products.forEach((element: any) => {
          this.productdata.push(element);
        });
      }
    });
    //
  }
  ////////////////////////////////////////////////////////////////////////////////////
  togglecategory() {
    this.togglecateegories = !this.togglecateegories;
  }
  togglerating() {
    this.toggleratings = !this.toggleratings;
  }
  togglebrand() {
    this.togglebrandings = !this.togglebrandings;
  }
  toggleprice() {
    this.togglepricings = !this.togglepricings;
  }

  ////////////////////////////////////////////////////////////////////////////////////
  onPriceChange(event: any) {
    const price = event.target.value;
    const isChecked = event.target.checked;

    if (isChecked) {
      this.selectedPrices.push(price);
    } else {
      const index = this.selectedPrices.indexOf(price);
      if (index !== -1) {
        this.selectedPrices.splice(index, 1);
      }
    }
    console.log('Selected prices:', this.selectedPrices);
    // console.log(this.filtereddata); // For debugging or logging
  }
  ////////////////////////////////////////////////////////////////////////////////
  oncategoryChange(event: any) {
    const category = event.target.value;
    const isChecked = event.target.checked;

    if (isChecked) {
      this.selectedCategories.push(category);
    } else {
      const index = this.selectedCategories.indexOf(category);
      if (index !== -1) {
        this.selectedCategories.splice(index, 1);
      }
    }
    console.log('seleccted categoris', this.selectedCategories); // For debugging or logging
    //
    this.selectedcategorybrands = this.productdata.filter((category: any) => {
      if (!this.selectedCategories.includes(category.category)) {
        return this.selectedCategories.push(category.category);
      } else {
        return true;
      }
    });
    //
    console.log('nehal', this.selectedcategorybrands, this.filtereddata);
  }

  //////////  //////////////////////////////////
  onratingChange(event: any) {
    const rating = event.target.value;
    const isChecked = event.target.checked;

    if (isChecked) {
      this.selectedRatings.push(rating);
    } else {
      const index = this.selectedRatings.indexOf(rating);
      if (index !== -1) {
        this.selectedRatings.splice(index, 1);
      }
    }
    // console.log(this.filtereddata); // For debugging or logging

    console.log('seleccted rating', this.selectedRatings); // For debugging or logging
  }
  ///////////////// //  /////////////////// /////////////////// //////////////////
  onbrandchange(event: any) {
    const brand = event.target.value;
    const isChecked = event.target.checked;

    if (isChecked) {
      this.selectedBrands.push(brand);
    } else {
      const index = this.selectedBrands.indexOf(brand);
      if (index !== -1) {
        this.selectedBrands.splice(index, 1);
      }
    }
    console.log('seleccted brand', this.selectedBrands, this.brand);
    // console.log(this.filtereddata['brands']); // For debugging or logging
  }
}
<div class="body">
  <nav class="navbar">
    <div class="categories">
      <h2 (click)="togglecategory()">categories</h2>
      <div *ngIf="togglecateegories">
        <label *ngFor="let categories of category">
          <input
            type="checkbox"
            name=" categories "
            value="{{ categories }}"
            (change)="oncategoryChange($event)"
          />
          <p>{{ categories }}</p>
        </label>
      </div>
    </div>
    <br />
    <!--  -->
    <!-- <div class="brand">
      <h2 (click)="togglebrand()">brand</h2>
      <div *ngIf="togglebrandings">
        <label *ngFor="let brand of brand">
          <input
            type="checkbox"
            name=" brand "
            value="{{ brand }}"
            (change)="onbrandchange($event)"
          />{{ brand }}
        </label>
      </div>
    </div>
    <br /> -->
    <div class="brand">
      <h2 (click)="togglebrand()">Brand</h2>

      <div *ngIf="togglebrandings">
        <div class="div" *ngIf="selectedcategorybrands.length > 0">
          <label *ngFor="let brand of selectedcategorybrands">
            <input
              type="checkbox"
              name="brand"
              value="{{ brand.brand }}"
              (change)="onbrandchange($event)"
            />
            {{ brand.brand }}
          </label>
        </div>

        <div
          class="div"
          *ngIf="selectedcategorybrands.length === 0 && brand.length > 0"
        >
          <label *ngFor="let brand of brand">
            <input
              type="checkbox"
              name="brand"
              value="{{ brand }}"
              (change)="onbrandchange($event)"
            />
            {{ brand }}
          </label>
        </div>

        <p *ngIf="selectedcategorybrands.length === 0 && brand.length === 0">
          No brands available.
        </p>
      </div>
    </div>
    <br />

    <br />
    <!--  -->
    <div class="rating">
      <h2 (click)="togglerating()">rating</h2>
      <div *ngIf="toggleratings">
        <label *ngFor="let rating of rating">
          <input
            type="checkbox"
            name="rating "
            value="{{ rating }}"
            (change)="onratingChange($event)"
          />{{ rating }}
        </label>
      </div>
    </div>
    <br />
    <div class="price">
      <h2 (click)="toggleprice()">price</h2>
      <div *ngIf="togglepricings">
        <label *ngFor="let price of price">
          <input
            type="checkbox"
            name=" price "
            value="{{ price }}"
            (change)="onPriceChange($event)"
          />
          {{ price }}
        </label>
      </div>
    </div>
    <br />
  </nav>
  <div class="display">
    <app-homepage [filteredData]="filtereddata"></app-homepage>
  </div>
</div>
when i am clicking on the categoryy it iss showing the caategory of that product but not able to search by brand 













///
// import { Component, Input, OnChanges } from '@angular/core';
// import { DataService } from '../data.service';

// @Component({
//   selector: 'app-homepage',
//   templateUrl: './homepage.component.html',
//   styleUrl: './homepage.component.css',
// })
// export class HomepageComponent {
//   @Input() filteredData: any;
//   toggle = true;
//   productdata: any[] = [];
//   filteredProducts: any[] = [];
//   filteredproductwithbrand: any[] = [];
//   togglecheckout = true;
//   checkout = false;
//   ascending: any[] = [];
//   descending: any[] = [];
//   constructor(private dataService: DataService) {}

//   ngOnInit() {
//     this.dataService.getData().subscribe((response) => {
//       if (response && response.products) {
//         this.productdata = response.products;

//         // Create copies for sorting without modifying original data
//         const ascendingData = this.productdata.slice();
//         const descendingData = this.productdata.slice();

//         // Sort data in ascending and descending order
//         ascendingData.sort((a, b) => {
//           const priceA = parseFloat(a.price);
//           const priceB = parseFloat(b.price);
//           return priceA - priceB; // Ascending order (lowest to highest)
//         });

//         descendingData.sort((a, b) => {
//           const priceA = parseFloat(a.price);
//           const priceB = parseFloat(b.price);
//           return priceB - priceA; // Descending order (highest to lowest)
//         });

//         this.ascending = ascendingData;
//         this.descending = descendingData;
//         // Example: Initially show ascending

//         console.log('Original data:', this.productdata);
//         console.log('Sorted data (ascending):', this.ascending);
//         console.log('Sorted data (descending):', this.descending);
//       } else {
//         console.log('Error fetching data or no products in response');
//       }
//     });
//   }

//   togglechckoutpage() {
//     this.togglecheckout = !this.togglecheckout;
//     this.checkout = !this.checkout;
//     this.toggle = !this.toggle;
//   }
//   togglehomepage() {
//     if (this.filteredProducts.length > 0) {
//       this.toggle = false;
//     }
//     if (this.filteredProducts.length == 0) {
//       this.toggle = true;
//     }
//   }

//   resetsearch() {
//     this.filteredProducts.length = 0;
//     this.toggle = true;
//   }

//   filtering() {
//     if (
//       this.filteredData.price.length > 0 &&
//       this.filteredData.price[0] === 'LowToHigh'
//     ) {
//       this.filteredProducts = this.ascending;
//     } else if (
//       this.filteredData.price.length > 0 &&
//       this.filteredData.price[0] === 'HighToLow'
//     ) {
//       this.filteredProducts = this.descending;
//     } else {
//       this.filteredProducts = this.productdata.filter((product: any) => {
//         if (
//           this.filteredData.category.length > 0 &&
//           this.filteredData.brand.length > 0
//         ) {
//           return (
//             this.filteredData.category.includes(product.category) &&
//             this.filteredData.brand.includes(product.brand)
//           );
//         } else {
//           this.filteredProducts.length = 0;
//         }

//         if (this.filteredData.brand.length > 0) {
//           return this.filteredData.brand.includes(product.brand);
//         } else {
//           this.filteredProducts.length = 0;
//         }

//         if (this.filteredData.category.length > 0) {
//           return this.filteredData.category.includes(product.category);
//         } else {
//           this.filteredProducts.length = 0;
//         }
//       });
//     }
//   }

//   // ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

//   cartData: any[] = [];

//   addTocart(product: any) {
//     product.forEach((ele: any) => {
//       const updatedProduct = { ...ele, quantity: 0, final_price: 0 };
//       this.cartData.push(updatedProduct);
//     });
//     console.log('this.cartData', this.cartData);
//   }
// }


// ////////////////////////////////////////////////////////
// if (this.filteredData.price.length > 0) {
//   // Sort filtered products based on price (if applicable)
//   const sortOrder = this.filteredData.price[0];
//   this.filteredProducts.sort((a, b) => {
//     const priceA = parseFloat(a.price);
//     const priceB = parseFloat(b.price);

//     if (sortOrder === 'LowToHigh') {
//       return priceA - priceB; // Ascending order
//     } else if (sortOrder === 'HighToLow') {
//       return priceB - priceA; // Descending order
//     }
//     return 0; // Equal prices
//   });
// }
// \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
// this.filteredProducts = this.productdata.filter((product: any) => {
//   if (
//     this.filteredData.category.length > 0 &&
//     this.filteredData.brand.length > 0
//     // &&
//     // this.filteredData.price[0] === 'LowToHigh'
//   ) {
//     return (
//       this.filteredData.category.includes(product.category) &&
//       this.filteredData.brand.includes(product.brand)
//     );
//   } else if (this.filteredData.brand.length > 0) {
//     return this.filteredData.brand.includes(product.brand);
//   } else if (this.filteredData.category.length > 0) {
//     return this.filteredData.category.includes(product.category);
//   } else {
//     return true; // Show all products if no filters are selected
//   }
// });
//
//
